  outp | addr | data

  --:- | 8000 |                ; mult_A:
  --:- | 8001 |                ; mult_B:
  --:- | 8002 |                ; mult_res:
  --:- | 8003 |                ; .input_byte:
  --:- | 8004 |                ; .buffer:
  --:- | 8008 |                ; .byte_counter:
  --:- | 8009 |                ; .shift_counter:
  --:- | 800a |                ; .data_pointer:
   0:0 |    0 |                ; top:
   0:0 |    0 | 0f 22 80 0b    ; sti string1[7:0], print_uart.data_pointer+1
   4:0 |    4 | 0f 00 80 0a    ; sti string1[15:8], print_uart.data_pointer
   8:0 |    8 | 10 01 52       ; cal print_uart
   b:0 |    b | 0f 30 80 0b    ; sti string2[7:0], print_uart.data_pointer+1
   f:0 |    f | 0f 00 80 0a    ; sti string2[15:8], print_uart.data_pointer
  13:0 |   13 | 10 01 52       ; cal print_uart
  16:0 |   16 | 0f 5c 80 0b    ; sti string3[7:0], print_uart.data_pointer+1
  1a:0 |   1a | 0f 00 80 0a    ; sti string3[15:8], print_uart.data_pointer
  1e:0 |   1e | 10 01 52       ; cal print_uart
  21:0 |   21 | ff             ; hlt
  22:0 |   22 |                ; string1:
  22:0 |   22 | 68 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a ; #d "hello world!\n"
  2f:0 |   2f | 00             ; 0x00
  30:0 |   30 |                ; string2:
  30:0 |   30 | 54 68 69 73 20 61 73 73 65 6d 62 6c 79 20 74 68 69 6e 67 20 73 65 65 6d 73 20 74 6f 20 62 65 20 77 6f 72 6b 69 6e 67 21 21 21 0a ; #d "This assembly thing seems to be working!!!\n"
  5b:0 |   5b | 00             ; 0x00
  5c:0 |   5c |                ; string3:
  5c:0 |   5c | 79 61 79 2e 0a ; #d "yay.\n"
  61:0 |   61 | 00             ; 0x00
  62:0 |   62 |                ; multiply:
  62:0 |   62 | 0f 00 80 02    ; sti 0x00, mult_res
  66:0 |   66 | 0b 80 01       ; lda mult_B
  69:0 |   69 | 07 00 8e       ; jmz mult_done
  6c:0 |   6c | 0b 80 02       ; lda mult_res
  6f:0 |   6f | 09 80 02       ; sta mult_res
  72:0 |   72 |                ; mult_run:
  72:0 |   72 | 0b 80 01       ; lda mult_B
  75:0 |   75 | 07 00 8e       ; jmz mult_done
  78:0 |   78 | 0b 80 02       ; lda mult_res
  7b:0 |   7b | 0c 80 00       ; ldb mult_A
  7e:0 |   7e | 04             ; add
  7f:0 |   7f | 09 80 02       ; sta mult_res
  82:0 |   82 | 0b 80 01       ; lda mult_B
  85:0 |   85 | 03 01          ; lbi 0x01
  87:0 |   87 | 06             ; sub
  88:0 |   88 | 09 80 01       ; sta mult_B
  8b:0 |   8b | 05 00 72       ; jmp mult_run
  8e:0 |   8e |                ; mult_done:
  8e:0 |   8e | 11             ; ret
  8f:0 |   8f |                ; divide:
  8f:0 |   8f | 0f 00 80 02    ; sti 0x00, mult_res
  93:0 |   93 | 0b 80 01       ; lda mult_B
  96:0 |   96 | 07 00 8e       ; jmz mult_done
  99:0 |   99 | 0b 80 02       ; lda mult_res
  9c:0 |   9c | 09 80 02       ; sta mult_res
  9f:0 |   9f |                ; div_run:
  9f:0 |   9f | 0b 80 00       ; lda mult_A
  a2:0 |   a2 | 0c 80 01       ; ldb mult_B
  a5:0 |   a5 | 06             ; sub
  a6:0 |   a6 | 0d 00 b8       ; jmc div_done
  a9:0 |   a9 | 09 80 00       ; sta mult_A
  ac:0 |   ac | 0b 80 02       ; lda mult_res
  af:0 |   af | 03 01          ; lbi 0x01
  b1:0 |   b1 | 04             ; add
  b2:0 |   b2 | 09 80 02       ; sta mult_res
  b5:0 |   b5 | 05 00 9f       ; jmp div_run
  b8:0 |   b8 |                ; div_done:
  b8:0 |   b8 | 11             ; ret
  b9:0 |   b9 |                ; uitoa_b:
  b9:0 |   b9 | 0f 00 80 04    ; sti 0x00, .buffer+0
  bd:0 |   bd | 0f 00 80 05    ; sti 0x00, .buffer+1
  c1:0 |   c1 | 0f 00 80 06    ; sti 0x00, .buffer+2
  c5:0 |   c5 | 0f 00 80 07    ; sti 0x00, .buffer+3
  c9:0 |   c9 | 0f 00 80 08    ; sti 0x00, .byte_counter
  cd:0 |   cd |                ; .digit_loop:
  cd:0 |   cd | 0b 80 03       ; lda .input_byte
  d0:0 |   d0 | 09 80 00       ; sta mult_A
  d3:0 |   d3 | 0f 0a 80 01    ; sti 10, mult_B
  d7:0 |   d7 | 10 00 8f       ; cal divide
  da:0 |   da | 0b 80 00       ; lda mult_A
  dd:0 |   dd | 03 30          ; lbi 0x30
  df:0 |   df | 04             ; add
  e0:0 |   e0 | 09 80 00       ; sta mult_A
  e3:0 |   e3 | 02 07          ; lai .buffer[7:0]+3
  e5:0 |   e5 | 0c 80 08       ; ldb .byte_counter
  e8:0 |   e8 | 06             ; sub
  e9:0 |   e9 | 15             ; pha
  ea:0 |   ea | 02 80          ; lai 0x80
  ec:0 |   ec | 15             ; pha
  ed:0 |   ed | 0b 80 00       ; lda mult_A
  f0:0 |   f0 | 17             ; ssa
  f1:0 |   f1 | 0b 80 08       ; lda .byte_counter
  f4:0 |   f4 | 03 01          ; lbi 0x01
  f6:0 |   f6 | 04             ; add
  f7:0 |   f7 | 09 80 08       ; sta .byte_counter
  fa:0 |   fa | 0b 80 02       ; lda mult_res
  fd:0 |   fd | 09 80 03       ; sta .input_byte
 100:0 |  100 | 0b 80 03       ; lda .input_byte
 103:0 |  103 | 03 00          ; lbi 0x00
 105:0 |  105 | 04             ; add
 106:0 |  106 | 07 01 0c       ; jmz .break_digit_loop
 109:0 |  109 | 05 00 cd       ; jmp .digit_loop
 10c:0 |  10c |                ; .break_digit_loop:
 10c:0 |  10c |                ; .shift_buffer:
 10c:0 |  10c | 0f 00 80 09    ; sti 0x00, .shift_counter
 110:0 |  110 | 0b 80 04       ; lda .buffer+0
 113:0 |  113 | 03 00          ; lbi 0x00
 115:0 |  115 | 04             ; add
 116:0 |  116 | 08 01 51       ; jnz .done
 119:0 |  119 |                ; .shift_buffer_loop:
 119:0 |  119 | 02 04          ; lai .buffer[7:0]
 11b:0 |  11b | 0c 80 09       ; ldb .shift_counter
 11e:0 |  11e | 04             ; add
 11f:0 |  11f | 15             ; pha
 120:0 |  120 | 02 80          ; lai 0x80
 122:0 |  122 | 15             ; pha
 123:0 |  123 | 0b 80 09       ; lda .shift_counter
 126:0 |  126 | 03 01          ; lbi 0x01
 128:0 |  128 | 04             ; add
 129:0 |  129 | 09 80 09       ; sta .shift_counter
 12c:0 |  12c | 02 04          ; lai .buffer[7:0]
 12e:0 |  12e | 0c 80 09       ; ldb .shift_counter
 131:0 |  131 | 04             ; add
 132:0 |  132 | 15             ; pha
 133:0 |  133 | 02 80          ; lai 0x80
 135:0 |  135 | 15             ; pha
 136:0 |  136 | 18             ; lsa
 137:0 |  137 | 17             ; ssa
 138:0 |  138 | 0b 80 09       ; lda .shift_counter
 13b:0 |  13b | 03 03          ; lbi 0x03
 13d:0 |  13d | 06             ; sub
 13e:0 |  13e | 08 01 19       ; jnz .shift_buffer_loop
 141:0 |  141 | 02 04          ; lai .buffer[7:0]
 143:0 |  143 | 0c 80 09       ; ldb .shift_counter
 146:0 |  146 | 04             ; add
 147:0 |  147 | 15             ; pha
 148:0 |  148 | 02 80          ; lai 0x80
 14a:0 |  14a | 15             ; pha
 14b:0 |  14b | 02 00          ; lai 0x00
 14d:0 |  14d | 17             ; ssa
 14e:0 |  14e | 05 01 0c       ; jmp .shift_buffer
 151:0 |  151 |                ; .done:
 151:0 |  151 | 11             ; ret
 152:0 |  152 |                ; print_uart:
 152:0 |  152 | 0b 80 0b       ; lda .data_pointer+1
 155:0 |  155 | 15             ; pha
 156:0 |  156 | 0b 80 0a       ; lda .data_pointer
 159:0 |  159 | 15             ; pha
 15a:0 |  15a | 18             ; lsa
 15b:0 |  15b | 03 00          ; lbi 0x00
 15d:0 |  15d | 04             ; add
 15e:0 |  15e | 07 01 7a       ; jmz .done
 161:0 |  161 | 09 d0 08       ; sta UART
 164:0 |  164 | 0b 80 0b       ; lda .data_pointer+1
 167:0 |  167 | 03 01          ; lbi 0x01
 169:0 |  169 | 04             ; add
 16a:0 |  16a | 09 80 0b       ; sta .data_pointer+1
 16d:0 |  16d | 0e 01 77       ; jnc .pass
 170:0 |  170 | 0b 80 0a       ; lda .data_pointer
 173:0 |  173 | 04             ; add
 174:0 |  174 | 09 80 0a       ; sta .data_pointer
 177:0 |  177 |                ; .pass:
 177:0 |  177 | 05 01 52       ; jmp print_uart
 17a:0 |  17a |                ; .done:
 17a:0 |  17a | 11             ; ret
