  outp | addr | data

  --:- | 8000 |             ; mult_A:
  --:- | 8001 |             ; mult_B:
  --:- | 8002 |             ; mult_res:
  --:- | 8003 |             ; .input_byte:
  --:- | 8004 |             ; .buffer:
  --:- | 8008 |             ; .byte_counter:
  --:- | 8009 |             ; .shift_counter:
  --:- | 800a |             ; .data_pointer:
   0:0 |    0 |             ; string:
   0:0 |    0 | 68 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a ; #d "hello world!\n"
   d:0 |    d | 00          ; 0x00
   e:0 |    e |             ; top:
   e:0 |    e | 0f 00 80 0b ; sti string[7:0], println.data_pointer+1
  12:0 |   12 | 0f 00 80 0a ; sti string[15:8], println.data_pointer
  16:0 |   16 | 10 01 0a    ; cal println
  19:0 |   19 | ff          ; hlt
  1a:0 |   1a |             ; multiply:
  1a:0 |   1a | 0f 00 80 02 ; sti 0x00, mult_res
  1e:0 |   1e | 0b 80 01    ; lda mult_B
  21:0 |   21 | 07 00 46    ; jmz mult_done
  24:0 |   24 | 0b 80 02    ; lda mult_res
  27:0 |   27 | 09 80 02    ; sta mult_res
  2a:0 |   2a |             ; mult_run:
  2a:0 |   2a | 0b 80 01    ; lda mult_B
  2d:0 |   2d | 07 00 46    ; jmz mult_done
  30:0 |   30 | 0b 80 02    ; lda mult_res
  33:0 |   33 | 0c 80 00    ; ldb mult_A
  36:0 |   36 | 04          ; add
  37:0 |   37 | 09 80 02    ; sta mult_res
  3a:0 |   3a | 0b 80 01    ; lda mult_B
  3d:0 |   3d | 03 01       ; lbi 0x01
  3f:0 |   3f | 06          ; sub
  40:0 |   40 | 09 80 01    ; sta mult_B
  43:0 |   43 | 05 00 2a    ; jmp mult_run
  46:0 |   46 |             ; mult_done:
  46:0 |   46 | 11          ; ret
  47:0 |   47 |             ; divide:
  47:0 |   47 | 0f 00 80 02 ; sti 0x00, mult_res
  4b:0 |   4b | 0b 80 01    ; lda mult_B
  4e:0 |   4e | 07 00 46    ; jmz mult_done
  51:0 |   51 | 0b 80 02    ; lda mult_res
  54:0 |   54 | 09 80 02    ; sta mult_res
  57:0 |   57 |             ; div_run:
  57:0 |   57 | 0b 80 00    ; lda mult_A
  5a:0 |   5a | 0c 80 01    ; ldb mult_B
  5d:0 |   5d | 06          ; sub
  5e:0 |   5e | 0d 00 70    ; jmc div_done
  61:0 |   61 | 09 80 00    ; sta mult_A
  64:0 |   64 | 0b 80 02    ; lda mult_res
  67:0 |   67 | 03 01       ; lbi 0x01
  69:0 |   69 | 04          ; add
  6a:0 |   6a | 09 80 02    ; sta mult_res
  6d:0 |   6d | 05 00 57    ; jmp div_run
  70:0 |   70 |             ; div_done:
  70:0 |   70 | 11          ; ret
  71:0 |   71 |             ; uitoa_b:
  71:0 |   71 | 0f 00 80 04 ; sti 0x00, .buffer+0
  75:0 |   75 | 0f 00 80 05 ; sti 0x00, .buffer+1
  79:0 |   79 | 0f 00 80 06 ; sti 0x00, .buffer+2
  7d:0 |   7d | 0f 00 80 07 ; sti 0x00, .buffer+3
  81:0 |   81 | 0f 00 80 08 ; sti 0x00, .byte_counter
  85:0 |   85 |             ; .digit_loop:
  85:0 |   85 | 0b 80 03    ; lda .input_byte
  88:0 |   88 | 09 80 00    ; sta mult_A
  8b:0 |   8b | 0f 0a 80 01 ; sti 10, mult_B
  8f:0 |   8f | 10 00 47    ; cal divide
  92:0 |   92 | 0b 80 00    ; lda mult_A
  95:0 |   95 | 03 30       ; lbi 0x30
  97:0 |   97 | 04          ; add
  98:0 |   98 | 09 80 00    ; sta mult_A
  9b:0 |   9b | 02 07       ; lai .buffer[7:0]+3
  9d:0 |   9d | 0c 80 08    ; ldb .byte_counter
  a0:0 |   a0 | 06          ; sub
  a1:0 |   a1 | 15          ; pha
  a2:0 |   a2 | 02 80       ; lai 0x80
  a4:0 |   a4 | 15          ; pha
  a5:0 |   a5 | 0b 80 00    ; lda mult_A
  a8:0 |   a8 | 17          ; ssa
  a9:0 |   a9 | 0b 80 08    ; lda .byte_counter
  ac:0 |   ac | 03 01       ; lbi 0x01
  ae:0 |   ae | 04          ; add
  af:0 |   af | 09 80 08    ; sta .byte_counter
  b2:0 |   b2 | 0b 80 02    ; lda mult_res
  b5:0 |   b5 | 09 80 03    ; sta .input_byte
  b8:0 |   b8 | 0b 80 03    ; lda .input_byte
  bb:0 |   bb | 03 00       ; lbi 0x00
  bd:0 |   bd | 04          ; add
  be:0 |   be | 07 00 c4    ; jmz .break_digit_loop
  c1:0 |   c1 | 05 00 85    ; jmp .digit_loop
  c4:0 |   c4 |             ; .break_digit_loop:
  c4:0 |   c4 |             ; .shift_buffer:
  c4:0 |   c4 | 0f 00 80 09 ; sti 0x00, .shift_counter
  c8:0 |   c8 | 0b 80 04    ; lda .buffer+0
  cb:0 |   cb | 03 00       ; lbi 0x00
  cd:0 |   cd | 04          ; add
  ce:0 |   ce | 08 01 09    ; jnz .done
  d1:0 |   d1 |             ; .shift_buffer_loop:
  d1:0 |   d1 | 02 04       ; lai .buffer[7:0]
  d3:0 |   d3 | 0c 80 09    ; ldb .shift_counter
  d6:0 |   d6 | 04          ; add
  d7:0 |   d7 | 15          ; pha
  d8:0 |   d8 | 02 80       ; lai 0x80
  da:0 |   da | 15          ; pha
  db:0 |   db | 0b 80 09    ; lda .shift_counter
  de:0 |   de | 03 01       ; lbi 0x01
  e0:0 |   e0 | 04          ; add
  e1:0 |   e1 | 09 80 09    ; sta .shift_counter
  e4:0 |   e4 | 02 04       ; lai .buffer[7:0]
  e6:0 |   e6 | 0c 80 09    ; ldb .shift_counter
  e9:0 |   e9 | 04          ; add
  ea:0 |   ea | 15          ; pha
  eb:0 |   eb | 02 80       ; lai 0x80
  ed:0 |   ed | 15          ; pha
  ee:0 |   ee | 18          ; lsa
  ef:0 |   ef | 17          ; ssa
  f0:0 |   f0 | 0b 80 09    ; lda .shift_counter
  f3:0 |   f3 | 03 03       ; lbi 0x03
  f5:0 |   f5 | 06          ; sub
  f6:0 |   f6 | 08 00 d1    ; jnz .shift_buffer_loop
  f9:0 |   f9 | 02 04       ; lai .buffer[7:0]
  fb:0 |   fb | 0c 80 09    ; ldb .shift_counter
  fe:0 |   fe | 04          ; add
  ff:0 |   ff | 15          ; pha
 100:0 |  100 | 02 80       ; lai 0x80
 102:0 |  102 | 15          ; pha
 103:0 |  103 | 02 00       ; lai 0x00
 105:0 |  105 | 17          ; ssa
 106:0 |  106 | 05 00 c4    ; jmp .shift_buffer
 109:0 |  109 |             ; .done:
 109:0 |  109 | 11          ; ret
 10a:0 |  10a |             ; println:
 10a:0 |  10a | 0b 80 0b    ; lda .data_pointer+1
 10d:0 |  10d | 15          ; pha
 10e:0 |  10e | 0b 80 0a    ; lda .data_pointer
 111:0 |  111 | 15          ; pha
 112:0 |  112 | 18          ; lsa
 113:0 |  113 | 03 00       ; lbi 0x00
 115:0 |  115 | 04          ; add
 116:0 |  116 | 07 01 28    ; jmz .done
 119:0 |  119 | 09 d0 08    ; sta UART
 11c:0 |  11c | 0b 80 0b    ; lda .data_pointer+1
 11f:0 |  11f | 03 01       ; lbi 0x01
 121:0 |  121 | 04          ; add
 122:0 |  122 | 09 80 0b    ; sta .data_pointer+1
 125:0 |  125 | 05 01 0a    ; jmp println
 128:0 |  128 |             ; .done:
 128:0 |  128 | 11          ; ret
